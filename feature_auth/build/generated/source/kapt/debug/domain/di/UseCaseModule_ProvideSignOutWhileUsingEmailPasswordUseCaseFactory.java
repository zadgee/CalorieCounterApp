// Generated by Dagger (https://dagger.dev).
package domain.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import domain.repository.AuthenticationRepository;
import domain.usecase.SignOutWhileUsingEmailPasswordUseCase;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class UseCaseModule_ProvideSignOutWhileUsingEmailPasswordUseCaseFactory implements Factory<SignOutWhileUsingEmailPasswordUseCase> {
  private final UseCaseModule module;

  private final Provider<AuthenticationRepository> repositoryProvider;

  public UseCaseModule_ProvideSignOutWhileUsingEmailPasswordUseCaseFactory(UseCaseModule module,
      Provider<AuthenticationRepository> repositoryProvider) {
    this.module = module;
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public SignOutWhileUsingEmailPasswordUseCase get() {
    return provideSignOutWhileUsingEmailPasswordUseCase(module, repositoryProvider.get());
  }

  public static UseCaseModule_ProvideSignOutWhileUsingEmailPasswordUseCaseFactory create(
      UseCaseModule module, Provider<AuthenticationRepository> repositoryProvider) {
    return new UseCaseModule_ProvideSignOutWhileUsingEmailPasswordUseCaseFactory(module, repositoryProvider);
  }

  public static SignOutWhileUsingEmailPasswordUseCase provideSignOutWhileUsingEmailPasswordUseCase(
      UseCaseModule instance, AuthenticationRepository repository) {
    return Preconditions.checkNotNullFromProvides(instance.provideSignOutWhileUsingEmailPasswordUseCase(repository));
  }
}
