// Generated by Dagger (https://dagger.dev).
package presentation.di;

import com.google.android.gms.auth.api.identity.BeginSignInRequest;
import com.google.android.gms.auth.api.identity.SignInClient;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import domain.usecase.AddUserToFireStoreUseCase;
import domain.usecase.DeleteUserFromFirebaseUseCase;
import domain.usecase.IsEmailVerifiedUseCase;
import domain.usecase.LoginUseCase;
import domain.usecase.ReloadUserUseCase;
import domain.usecase.SendEmailVerificationLetterUseCase;
import domain.usecase.SignOutWhileUsingEmailPasswordUseCase;
import domain.usecase.SignOutWhileUsingGmailAuth;
import domain.usecase.SignUpUseCase;
import domain.usecases.InsertUserUseCase;
import javax.inject.Provider;
import presentation.viewModels.AuthenticationViewModelFactory;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class PresentationModule_ProvideAuthenticationViewModelFactoryFactory implements Factory<AuthenticationViewModelFactory> {
  private final PresentationModule module;

  private final Provider<AddUserToFireStoreUseCase> addUserToFireStoreUseCaseProvider;

  private final Provider<DeleteUserFromFirebaseUseCase> deleteUserFromFirebaseUseCaseProvider;

  private final Provider<LoginUseCase> loginUseCaseProvider;

  private final Provider<ReloadUserUseCase> reloadUserUseCaseProvider;

  private final Provider<SendEmailVerificationLetterUseCase> sendEmailVerificationLetterUseCaseProvider;

  private final Provider<SignOutWhileUsingEmailPasswordUseCase> signOutWhileUsingEmailPasswordUseCaseProvider;

  private final Provider<SignOutWhileUsingGmailAuth> signOutWhileUsingGmailAuthProvider;

  private final Provider<SignUpUseCase> signUpUseCaseProvider;

  private final Provider<SignInClient> oneTapClientProvider;

  private final Provider<BeginSignInRequest> signInWithGmailProvider;

  private final Provider<IsEmailVerifiedUseCase> isEmailVerifiedUseCaseProvider;

  private final Provider<InsertUserUseCase> insertUserUseCaseProvider;

  public PresentationModule_ProvideAuthenticationViewModelFactoryFactory(PresentationModule module,
      Provider<AddUserToFireStoreUseCase> addUserToFireStoreUseCaseProvider,
      Provider<DeleteUserFromFirebaseUseCase> deleteUserFromFirebaseUseCaseProvider,
      Provider<LoginUseCase> loginUseCaseProvider,
      Provider<ReloadUserUseCase> reloadUserUseCaseProvider,
      Provider<SendEmailVerificationLetterUseCase> sendEmailVerificationLetterUseCaseProvider,
      Provider<SignOutWhileUsingEmailPasswordUseCase> signOutWhileUsingEmailPasswordUseCaseProvider,
      Provider<SignOutWhileUsingGmailAuth> signOutWhileUsingGmailAuthProvider,
      Provider<SignUpUseCase> signUpUseCaseProvider, Provider<SignInClient> oneTapClientProvider,
      Provider<BeginSignInRequest> signInWithGmailProvider,
      Provider<IsEmailVerifiedUseCase> isEmailVerifiedUseCaseProvider,
      Provider<InsertUserUseCase> insertUserUseCaseProvider) {
    this.module = module;
    this.addUserToFireStoreUseCaseProvider = addUserToFireStoreUseCaseProvider;
    this.deleteUserFromFirebaseUseCaseProvider = deleteUserFromFirebaseUseCaseProvider;
    this.loginUseCaseProvider = loginUseCaseProvider;
    this.reloadUserUseCaseProvider = reloadUserUseCaseProvider;
    this.sendEmailVerificationLetterUseCaseProvider = sendEmailVerificationLetterUseCaseProvider;
    this.signOutWhileUsingEmailPasswordUseCaseProvider = signOutWhileUsingEmailPasswordUseCaseProvider;
    this.signOutWhileUsingGmailAuthProvider = signOutWhileUsingGmailAuthProvider;
    this.signUpUseCaseProvider = signUpUseCaseProvider;
    this.oneTapClientProvider = oneTapClientProvider;
    this.signInWithGmailProvider = signInWithGmailProvider;
    this.isEmailVerifiedUseCaseProvider = isEmailVerifiedUseCaseProvider;
    this.insertUserUseCaseProvider = insertUserUseCaseProvider;
  }

  @Override
  public AuthenticationViewModelFactory get() {
    return provideAuthenticationViewModelFactory(module, addUserToFireStoreUseCaseProvider.get(), deleteUserFromFirebaseUseCaseProvider.get(), loginUseCaseProvider.get(), reloadUserUseCaseProvider.get(), sendEmailVerificationLetterUseCaseProvider.get(), signOutWhileUsingEmailPasswordUseCaseProvider.get(), signOutWhileUsingGmailAuthProvider.get(), signUpUseCaseProvider.get(), oneTapClientProvider.get(), signInWithGmailProvider.get(), isEmailVerifiedUseCaseProvider.get(), insertUserUseCaseProvider.get());
  }

  public static PresentationModule_ProvideAuthenticationViewModelFactoryFactory create(
      PresentationModule module,
      Provider<AddUserToFireStoreUseCase> addUserToFireStoreUseCaseProvider,
      Provider<DeleteUserFromFirebaseUseCase> deleteUserFromFirebaseUseCaseProvider,
      Provider<LoginUseCase> loginUseCaseProvider,
      Provider<ReloadUserUseCase> reloadUserUseCaseProvider,
      Provider<SendEmailVerificationLetterUseCase> sendEmailVerificationLetterUseCaseProvider,
      Provider<SignOutWhileUsingEmailPasswordUseCase> signOutWhileUsingEmailPasswordUseCaseProvider,
      Provider<SignOutWhileUsingGmailAuth> signOutWhileUsingGmailAuthProvider,
      Provider<SignUpUseCase> signUpUseCaseProvider, Provider<SignInClient> oneTapClientProvider,
      Provider<BeginSignInRequest> signInWithGmailProvider,
      Provider<IsEmailVerifiedUseCase> isEmailVerifiedUseCaseProvider,
      Provider<InsertUserUseCase> insertUserUseCaseProvider) {
    return new PresentationModule_ProvideAuthenticationViewModelFactoryFactory(module, addUserToFireStoreUseCaseProvider, deleteUserFromFirebaseUseCaseProvider, loginUseCaseProvider, reloadUserUseCaseProvider, sendEmailVerificationLetterUseCaseProvider, signOutWhileUsingEmailPasswordUseCaseProvider, signOutWhileUsingGmailAuthProvider, signUpUseCaseProvider, oneTapClientProvider, signInWithGmailProvider, isEmailVerifiedUseCaseProvider, insertUserUseCaseProvider);
  }

  public static AuthenticationViewModelFactory provideAuthenticationViewModelFactory(
      PresentationModule instance, AddUserToFireStoreUseCase addUserToFireStoreUseCase,
      DeleteUserFromFirebaseUseCase deleteUserFromFirebaseUseCase, LoginUseCase loginUseCase,
      ReloadUserUseCase reloadUserUseCase,
      SendEmailVerificationLetterUseCase sendEmailVerificationLetterUseCase,
      SignOutWhileUsingEmailPasswordUseCase signOutWhileUsingEmailPasswordUseCase,
      SignOutWhileUsingGmailAuth signOutWhileUsingGmailAuth, SignUpUseCase signUpUseCase,
      SignInClient oneTapClient, BeginSignInRequest signInWithGmail,
      IsEmailVerifiedUseCase isEmailVerifiedUseCase, InsertUserUseCase insertUserUseCase) {
    return Preconditions.checkNotNullFromProvides(instance.provideAuthenticationViewModelFactory(addUserToFireStoreUseCase, deleteUserFromFirebaseUseCase, loginUseCase, reloadUserUseCase, sendEmailVerificationLetterUseCase, signOutWhileUsingEmailPasswordUseCase, signOutWhileUsingGmailAuth, signUpUseCase, oneTapClient, signInWithGmail, isEmailVerifiedUseCase, insertUserUseCase));
  }
}
